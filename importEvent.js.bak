import 'dotenv/config';  // Load environment variables from a .env file if present
import { scrapeFbEvent } from 'facebook-event-scraper';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import fetch from 'node-fetch';  // Assurez-vous d'installer node-fetch
import stringSimilarity from 'string-similarity'; // Pour le fuzzy matching

const DRY_RUN = false; // Change to true for dry-run mode (no DB insertion)
const FUZZY_THRESHOLD = 0.75; // Seuil de similarit√© pour le fuzzy matching (modifiable)

const supabaseUrl = process.env.SUPABASE_URL;
const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const longLivedToken = process.env.LONG_LIVED_TOKEN;  // Your long-lived token for Graph API
const googleApiKey = process.env.GOOGLE_API_KEY;       // Your Google Maps API key

if (!supabaseUrl || !serviceKey) {
    console.error("Please set SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY in your environment variables.");
    process.exit(1);
}
if (!longLivedToken) {
    console.error("Please set LONG_LIVED_TOKEN in your environment variables.");
    process.exit(1);
}
if (!googleApiKey) {
    console.error("Please set GOOGLE_API_KEY in your environment variables.");
    process.exit(1);
}

// Charger les exceptions depuis geocoding_exceptions.json
let geocodingExceptions = {};
try {
    geocodingExceptions = JSON.parse(fs.readFileSync('geocoding_exceptions.json', 'utf8'));
} catch (err) {
    console.error("Error loading geocoding_exceptions.json:", err);
}

// Fonction de normalisation : si une exception existe pour un nom, la remplacer
function getNormalizedName(originalName) {
    if (geocodingExceptions[originalName]) {
        return geocodingExceptions[originalName];
    }
    return originalName;
}

// Initialize Supabase client with the service role key for full access
const supabase = createClient(supabaseUrl, serviceKey);

// URL of the Facebook event to scrape (customize or pass as an argument)
const eventUrl = process.argv[2] || 'https://www.facebook.com/events/1234567890';

// Function to compute distance (in meters) between two coordinates using the Haversine formula
function haversineDistance(lat1, lon1, lat2, lon2) {
    const R = 6371000; // Earth radius in meters
    const toRad = (x) => (x * Math.PI) / 180;
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}

// Function to fetch high resolution image using Graph API
async function fetchHighResImage(objectId) {
    try {
        const response = await fetch(`https://graph.facebook.com/${objectId}?fields=picture.width(720).height(720)&access_token=${longLivedToken}`);
        const data = await response.json();
        if (data.picture && data.picture.data && data.picture.data.url) {
            return data.picture.data.url;
        }
    } catch (err) {
        console.error("Error fetching high resolution image:", err);
    }
    return null;
}

// Function to fetch address from Google Maps using the venue name
async function fetchAddressFromGoogle(venueName) {
    try {
        const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(venueName)}&key=${googleApiKey}`);
        const data = await response.json();
        if (data.status === "OK" && data.results && data.results.length > 0) {
            return data.results[0];
        } else {
            console.error("Google Geocoding API error or no results:", data.status);
        }
    } catch (err) {
        console.error("Error fetching address from Google:", err);
    }
    return null;
}

// Function to fetch address using Nominatim reverse geocoding
async function fetchAddressFromNominatim(lat, lon) {
    try {
        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
        const data = await response.json();
        if (data && data.display_name) {
            return data;
        } else {
            console.error("Nominatim reverse geocoding returned no result");
        }
    } catch (err) {
        console.error("Error fetching address from Nominatim:", err);
    }
    return null;
}

// Function to ensure a relation exists in a given table
async function ensureRelation(table, relationData, relationName) {
    const { data, error } = await supabase
        .from(table)
        .select() // Select all columns (avoid specifying "id" which might not exist)
        .match(relationData);
    if (error) throw error;
    if (!data || data.length === 0) {
        const { error: insertError } = await supabase
            .from(table)
            .insert(relationData);
        if (insertError) throw insertError;
        console.log(`‚úÖ ${relationName} relation created: ${JSON.stringify(relationData)}`);
    } else {
        console.log(`‚û°Ô∏è ${relationName} relation already exists: ${JSON.stringify(relationData)}`);
    }
}

// Function to find or insert a promoter using fuzzy matching and exceptions
async function findOrInsertPromoter(promoterName, eventData) {
    // Normaliser le nom en utilisant les exceptions
    const normalizedName = getNormalizedName(promoterName);

    // Recherche exacte
    const { data: exactMatches, error: exactError } = await supabase
        .from('promoters')
        .select('id, name, image_url')
        .eq('name', normalizedName);
    if (exactError) throw exactError;
    if (exactMatches && exactMatches.length > 0) {
        console.log(`‚û°Ô∏è Promoter "${promoterName}" (normalized as "${normalizedName}") found by exact match (id=${exactMatches[0].id}).`);
        return exactMatches[0].id;
    }

    // Fuzzy matching : r√©cup√©rer tous les promoteurs existants
    const { data: allPromoters, error: allError } = await supabase
        .from('promoters')
        .select('id, name, image_url');
    if (allError) throw allError;
    if (allPromoters && allPromoters.length > 0) {
        const matches = stringSimilarity.findBestMatch(normalizedName.toLowerCase(), allPromoters.map(p => p.name.toLowerCase()));
        const bestMatch = matches.bestMatch;
        if (bestMatch.rating >= FUZZY_THRESHOLD) {
            const matchedPromoter = allPromoters[matches.bestMatchIndex];
            console.log(`‚û°Ô∏è Promoter "${promoterName}" (normalized as "${normalizedName}") is similar to existing promoter "${matchedPromoter.name}" (id=${matchedPromoter.id}).`);
            return matchedPromoter.id;
        }
    }

    // Aucun promoteur similaire trouv√©, ins√©rer un nouveau promoteur
    console.log(`‚û°Ô∏è Promoter "${promoterName}" not found by fuzzy matching. Inserting new promoter...`);
    const promoterSource = eventData.hosts.find(h => h.name === promoterName);
    const newPromoterData = { name: normalizedName };
    if (promoterSource && promoterSource.id) {
        const highResUrl = await fetchHighResImage(promoterSource.id);
        if (highResUrl) newPromoterData.image_url = highResUrl;
    }
    if (!newPromoterData.image_url && promoterSource && promoterSource.photo && promoterSource.photo.imageUri) {
        newPromoterData.image_url = promoterSource.photo.imageUri;
    }
    const { data: newPromoter, error: insertPromoterError } = await supabase
        .from('promoters')
        .insert(newPromoterData)
        .select();
    if (insertPromoterError || !newPromoter) throw insertPromoterError || new Error("Promoter insertion failed");
    console.log(`‚úÖ New promoter inserted: "${promoterName}" (normalized as "${normalizedName}") (id=${newPromoter[0].id}).`);
    return newPromoter[0].id;
}

async function main() {
    try {
        console.log("üîé Scraping the Facebook event...");
        const eventData = await scrapeFbEvent(eventUrl);
        console.log(`‚úÖ Scraped data for event: "${eventData.name}" (Facebook ID: ${eventData.id})`);
        // Vous pouvez d√©commenter la ligne suivante pour voir les donn√©es brutes :
        // console.log("Raw event data:", JSON.stringify(eventData, null, 2));

        // Transformation des donn√©es
        const eventName = eventData.name || null;
        const eventDescription = eventData.description || null;
        const eventType = (eventData.categories && eventData.categories.length) ? eventData.categories[0].label : null;
        const startTimeISO = eventData.startTimestamp ? new Date(eventData.startTimestamp * 1000).toISOString() : null;
        const endTimeISO = eventData.endTimestamp ? new Date(eventData.endTimestamp * 1000).toISOString() : null;
        const fbEventUrl = eventData.url || eventUrl;

        // Pr√©parer la liste des promoteurs
        const promotersList = eventData.hosts ? eventData.hosts.map(h => h.name) : [];
        // Informations sur le lieu depuis Facebook
        const location = eventData.location || null;
        const venueName = location ? location.name : null;
        // Adresse fournie par Facebook (peut √™tre null)
        let venueAddress = location ? location.address : null;
        const venueCity = location && location.city ? location.city.name : null;
        const venueCountry = location ? location.countryCode : null;
        const venueLatitude = (location && location.coordinates) ? location.coordinates.latitude : null;
        const venueLongitude = (location && location.coordinates) ? location.coordinates.longitude : null;

        // Si l'adresse est absente, utiliser Google Maps puis Nominatim ; sinon, utiliser le nom du lieu
        if (!venueAddress && venueName) {
            console.log(`\nüîç No address found from Facebook for venue "${venueName}". Querying Google Maps...`);
            let googleResult = await fetchAddressFromGoogle(venueName);
            if (googleResult) {
                const googleLat = googleResult.geometry.location.lat;
                const googleLng = googleResult.geometry.location.lng;
                if (venueLatitude && venueLongitude) {
                    const distance = haversineDistance(venueLatitude, venueLongitude, googleLat, googleLng);
                    console.log(`Distance between FB and Google: ${distance.toFixed(2)} meters`);
                    const threshold = 500; // seuil de 500 m
                    if (distance < threshold) {
                        venueAddress = googleResult.formatted_address;
                        console.log(`‚úÖ Using Google address: ${venueAddress}`);
                    } else {
                        console.log("‚ö†Ô∏è Google address is too far from FB coordinates.");
                    }
                } else {
                    venueAddress = googleResult.formatted_address;
                    console.log(`‚úÖ Using Google address (no FB coordinates): ${venueAddress}`);
                }
            }
            if (!venueAddress && venueLatitude && venueLongitude) {
                console.log(`\nüîç No address from Google. Querying Nominatim reverse geocoding for coordinates ${venueLatitude}, ${venueLongitude}...`);
                const nominatimResult = await fetchAddressFromNominatim(venueLatitude, venueLongitude);
                if (nominatimResult) {
                    venueAddress = nominatimResult.display_name;
                    console.log(`‚úÖ Using Nominatim address: ${venueAddress}`);
                }
            }
            if (!venueAddress) {
                console.log(`‚ö†Ô∏è No address found via Google Maps or Nominatim; using venue name "${venueName}" as address.`);
                venueAddress = venueName;
            }
        }

        // Ins√©rer ou r√©cup√©rer les promoteurs (avec fuzzy matching et exceptions)
        const promoterIds = [];
        for (const promoterName of promotersList) {
            if (!promoterName) continue;
            console.log(`\nüîç Processing promoter "${promoterName}"...`);
            let promoterId;
            if (DRY_RUN) {
                const host = eventData.hosts.find(h => h.name === promoterName);
                if (host && host.id) {
                    console.log(`‚û°Ô∏è Dry run: Found promoter "${promoterName}" with Facebook ID: ${host.id}`);
                    promoterId = host.id;
                } else {
                    console.log(`‚û°Ô∏è Dry run: No Facebook ID found for promoter "${promoterName}"`);
                }
            } else {
                promoterId = await findOrInsertPromoter(promoterName, eventData);
            }
            promoterIds.push(promoterId);
        }

        // Ins√©rer ou r√©cup√©rer la venue en v√©rifiant par adresse, par nom exact puis par fuzzy matching
        let venueId = null;
        if (venueName) {
            console.log(`\nüîç Processing venue "${venueName}"...`);
            // Normaliser le nom via les exceptions
            const normalizedVenueName = getNormalizedName(venueName);

            // D'abord, chercher par adresse (location)
            const { data: venuesByAddress, error: venuesByAddressError } = await supabase
                .from('venues')
                .select('id, location, name')
                .eq('location', venueAddress);
            if (venuesByAddressError) throw venuesByAddressError;
            if (venuesByAddress && venuesByAddress.length > 0) {
                venueId = venuesByAddress[0].id;
                console.log(`‚û°Ô∏è Venue found by address (location): "${venueAddress}" (id=${venueId}).`);
            } else {
                // Ensuite, chercher par nom exact
                const { data: venuesByName, error: venuesByNameError } = await supabase
                    .from('venues')
                    .select('id, name, location')
                    .eq('name', normalizedVenueName);
                if (venuesByNameError) throw venuesByNameError;
                if (venuesByName && venuesByName.length > 0) {
                    venueId = venuesByName[0].id;
                    console.log(`‚û°Ô∏è Venue "${normalizedVenueName}" found by exact name (id=${venueId}).`);
                } else {
                    // Enfin, utiliser le fuzzy matching parmi tous les lieux existants
                    const { data: allVenues, error: allVenuesError } = await supabase
                        .from('venues')
                        .select('id, name, location');
                    if (allVenuesError) throw allVenuesError;
                    const match = allVenues.find(v => stringSimilarity.compareTwoStrings(v.name.toLowerCase(), normalizedVenueName.toLowerCase()) >= FUZZY_THRESHOLD);
                    if (match) {
                        venueId = match.id;
                        console.log(`‚û°Ô∏è Venue "${normalizedVenueName}" is similar to existing venue "${match.name}" (id=${venueId}).`);
                    } else {
                        console.log(`‚û°Ô∏è No venue found for "${normalizedVenueName}". Inserting new venue...`);
                        const newVenueData = { name: normalizedVenueName };
                        // Always assign the address to the "location" column
                        newVenueData.location = venueAddress;
                        // Build geo object: add locality if available, add country if available
                        const geo = {};
                        if (venueCity) geo.locality = venueCity;
                        if (venueCountry) geo.country = venueCountry;
                        if (Object.keys(geo).length > 0) newVenueData.geo = geo;
                        if (venueLatitude && venueLongitude) {
                            newVenueData.location_point = `SRID=4326;POINT(${venueLongitude} ${venueLatitude})`;
                        }
                        // Gestion de l'image pour la venue
                        if (!newVenueData.image_url) {
                            let promoterSource = eventData.hosts.find(h => getNormalizedName(h.name) === normalizedVenueName);
                            if (promoterSource && promoterSource.id) {
                                const highResUrl = await fetchHighResImage(promoterSource.id);
                                if (highResUrl) {
                                    newVenueData.image_url = highResUrl;
                                    console.log(`‚û°Ô∏è No image for venue "${normalizedVenueName}" in scraped data; using high-res promoter image from Graph API.`);
                                }
                            }
                            if (!newVenueData.image_url && promoterSource && promoterSource.photo && promoterSource.photo.imageUri) {
                                newVenueData.image_url = promoterSource.photo.imageUri;
                                console.log(`‚û°Ô∏è No image for venue "${normalizedVenueName}" in scraped data; using promoter image from eventData.`);
                            } else {
                                const { data: dbPromoters, error: dbError } = await supabase
                                    .from('promoters')
                                    .select('image_url')
                                    .eq('name', normalizedVenueName)
                                    .limit(1);
                                if (!dbError && dbPromoters && dbPromoters.length > 0 && dbPromoters[0].image_url) {
                                    newVenueData.image_url = dbPromoters[0].image_url;
                                    console.log(`‚û°Ô∏è No image for venue "${normalizedVenueName}" in scraped data; using image from existing promoter in the database.`);
                                }
                            }
                        }
                        const { data: newVenue, error: insertVenueError } = await supabase
                            .from('venues')
                            .insert(newVenueData)
                            .select();
                        if (insertVenueError || !newVenue) throw insertVenueError || new Error("Venue insertion failed");
                        venueId = newVenue[0].id;
                        console.log(`‚úÖ New venue inserted: "${normalizedVenueName}" (id=${venueId}).`);
                    }
                }
            }
        } else {
            console.log("\n‚ÑπÔ∏è No venue information to insert (online event or venue not specified).");
        }

        // V√©rifier si l'√©v√©nement existe d√©j√† en base (par facebook_url ou titre)
        console.log(`\nüìù Checking if event "${eventName}" already exists in the database...`);
        let eventId = null;
        const { data: eventsByUrl, error: eventsByUrlError } = await supabase
            .from('events')
            .select('id, metadata')
            .ilike('metadata->>facebook_url', fbEventUrl);
        if (eventsByUrlError) throw eventsByUrlError;
        if (eventsByUrl && eventsByUrl.length > 0) {
            eventId = eventsByUrl[0].id;
            console.log(`‚û°Ô∏è Event found by facebook_url (id=${eventId}).`);
        } else {
            const { data: eventsByName, error: eventsByNameError } = await supabase
                .from('events')
                .select('id')
                .eq('title', eventName);
            if (eventsByNameError) throw eventsByNameError;
            if (eventsByName && eventsByName.length > 0) {
                eventId = eventsByName[0].id;
                console.log(`‚û°Ô∏è Event found by title matching (id=${eventId}).`);
            }
        }

        // Si l'√©v√©nement existe, mettre √† jour les relations, sinon ins√©rer l'√©v√©nement.
        if (eventId) {
            console.log("\nüîÑ Event already exists. Updating missing relations...");
        } else {
            console.log(`\nüìù Inserting event "${eventName}" into the events table...`);
            const metadata = { facebook_url: fbEventUrl };
            if (eventData.ticketUrl) {
                metadata.ticket_link = eventData.ticketUrl;
            }
            const eventRecord = {
                title: eventName,
                type: eventType,
                date_time: startTimeISO,
                end_date_time: endTimeISO,
                description: eventDescription,
                image_url: (eventData.photo && eventData.photo.imageUri) ? eventData.photo.imageUri : null,
                metadata: metadata
            };
            const { data: newEvent, error: insertEventError } = await supabase
                .from('events')
                .insert(eventRecord)
                .select();
            if (insertEventError || !newEvent) throw insertEventError || new Error("Event insertion failed");
            eventId = newEvent[0].id;
            console.log(`‚úÖ Event inserted successfully (id=${eventId}).`);
        }

        // Ensure event_promoter relations
        if (promoterIds.length > 0) {
            console.log("\nüîó Ensuring event_promoter relations...");
            for (const pid of promoterIds) {
                await ensureRelation("event_promoter", { event_id: eventId, promoter_id: pid }, "event_promoter");
            }
        }
        // Ensure event_venue relation
        if (venueId) {
            console.log("\nüîó Ensuring event_venue relation...");
            await ensureRelation("event_venue", { event_id: eventId, venue_id: venueId }, "event_venue");
        }
        // Create venue_promoter relation if a promoter and venue share the same name
        if (venueId && venueName) {
            const matchingIndexes = promotersList.reduce((indexes, name, idx) => {
                if (name === venueName) indexes.push(idx);
                return indexes;
            }, []);
            for (const idx of matchingIndexes) {
                const promoterId = promoterIds[idx];
                await ensureRelation("venue_promoter", { venue_id: venueId, promoter_id: promoterId }, "venue_promoter");
            }
        }

        const outputData = {
            event: { ...{ title: eventName, type: eventType, date_time: startTimeISO, end_date_time: endTimeISO, description: eventDescription, image_url: (eventData.photo && eventData.photo.imageUri) ? eventData.photo.imageUri : null, metadata: { facebook_url: fbEventUrl, ticket_link: eventData.ticketUrl || null } }, id: eventId },
            promoters: promoterIds.map((id, index) => ({ id, name: promotersList[index] })),
            venue: venueId
                ? {
                    id: venueId,
                    name: venueName,
                    location: venueAddress,
                    geo: (venueCity || venueCountry)
                        ? { ...(venueCity && { locality: venueCity }), ...(venueCountry && { country: venueCountry }) }
                        : undefined,
                    location_point: (venueLatitude && venueLongitude) ? `SRID=4326;POINT(${venueLongitude} ${venueLatitude})` : null
                }
                : null,
            event_promoter: promoterIds.map(pid => ({ event_id: eventId, promoter_id: pid })),
            event_venue: venueId ? { event_id: eventId, venue_id: venueId } : null
        };

        fs.writeFileSync('output.json', JSON.stringify(outputData, null, 2), 'utf8');
        console.log("\nüíæ Transformed data saved to output.json.");
        console.log("‚úÖ Script completed successfully.");
    } catch (err) {
        console.error("‚ùå An error occurred:", err.message || err);
        process.exit(1);
    }
}

main();
